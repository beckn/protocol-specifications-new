openapi: 3.1.1
info:
  title: Beckn Discover API
  description: |
    A flexible, extensible search and discovery API for heterogeneous item types that automatically adapts to any schema that extends beckn:Item.

    **Key Features:**
    - Generic Schema Support: Any item type extending beckn:Item via owl:intersectionOf is automatically supported
    - Multi-Schema Search: Support for searching across multiple item types simultaneously
    - JSON-LD Compatibility: Full support for JSON-LD context and type information
    - Schema-Driven Responses: Response fields automatically determined by schema-context.jsonld
    - Flexible Filtering: Support for filtering on any field from extended item schemas

    Search and discover items across any schemas that extend beckn:Item via owl:intersectionOf.
    The API supports both single-schema and multi-schema searches, allowing you to query across heterogeneous item types in a single request.
  version: 2.0.0
  contact:
    name: Beckn Protocol
    url: https://becknprotocol.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://staging-api.becknprotocol.io
    description: Staging server
  - url: http://localhost:8080
    description: Local development server

paths:
  /beckn/discover:
    get:
      summary: Discover items across multiple schemas
      description: |
        Search and discover items across any schemas in Beckn Schema registry. Supports text search, JSONPath-based filtering (RFC 9535), or both together with automatic schema adaptation. This endpoint may return either an **ACK/NACK** confirming receipt/validation or a synchronous **DiscoverResponse** providing discovery results in catalog format. Networks may still choose to deliver results asynchronously via **/beckn/on_discover**.
      operationId: discoverItems
      tags: [Discovery]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverRequest'
            examples:
              structured_query:
                $ref: '#/components/examples/discover_structured_query'
              natural_language:
                $ref: '#/components/examples/discover_natural_language'
              grocery_search:
                $ref: '#/components/examples/discover_grocery_search'
              combined_search:
                $ref: '#/components/examples/discover_combined_search'
              multi_schema_search:
                $ref: '#/components/examples/discover_multi_schema_search'
      responses:
        '200':
          description: ACK — received the discover request (validation passed)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AckResponse'
                  - $ref: '#/components/schemas/DiscoverResponse'
              examples:
                discover_electronics_catalog:
                  $ref: '#/components/examples/on_discover_electronics_catalog'
                discover_grocery_catalog:
                  $ref: '#/components/examples/on_discover_grocery_catalog'
                success_ack:
                  $ref: '#/components/examples/ack_success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
              examples:
                bad_request:
                  $ref: '#/components/examples/ack_bad_request'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
              examples:
                server_error:
                  $ref: '#/components/examples/ack_server_error'

  /beckn/on_discover:
    post:
      summary: On Discover response with catalog data
      description: |
        Callback endpoint that provides the actual discovery results in catalog format. This endpoint is called by the BPP to return the search results after processing the discover request. **This endpoint returns only an ACK/NACK** confirming receipt and validation of the catalog payload.
      operationId: onDiscoverItems
      tags: [Discovery]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverResponse'
            examples:
              electronic_items_catalog:
                $ref: '#/components/examples/on_discover_electronics_catalog'
              grocery_items_catalog:
                $ref: '#/components/examples/on_discover_grocery_catalog'
      responses:
        '200':
          description: ACK — received catalog data for the corresponding discover request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
              examples:
                success_ack:
                  $ref: '#/components/examples/ack_success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
              examples:
                bad_request:
                  $ref: '#/components/examples/ack_bad_request'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckResponse'
              examples:
                server_error:
                  $ref: '#/components/examples/ack_server_error'

  /beckn/discover/browser-search:
    get:
      summary: Browser-friendly search API
      description: |
        URL-based search API for browser navigation and direct links using JSONPath expressions.
        Response format is determined by the Accept header:
        - Accept: text/html → Returns browser-friendly HTML page (default)
        - Accept: application/json → Returns structured JSON data in same format as structured query API

        Supports complex filtering via URL-encoded JSONPath expressions.
        Generic search across all entity types (items, providers, catalogs) based on filter criteria.
      operationId: browserSearch
      tags: [Browser Search]
      parameters:
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            enum: ["text/html", "application/json"]
            default: "text/html"
          description: |
            Response format preference.
            - Accept: text/html → Returns browser-friendly HTML page (default)
            - Accept: application/json → Returns structured JSON data in same format as structured query API
          examples:
            default:
              value: "text/html"
        - name: filters
          in: query
          required: false
          schema:
            type: string
          description: URL-encoded JSONPath expression for complex filtering
          examples:
            sample:
              value: "%24%5B%3F%28%40.price%20%3C%3D%201000%20%26%26%20%40.brand%20%3D%3D%20%27Premium%20Tech%27%29%5D"
      responses:
        '200':
          description: Successful search response
          content:
            text/html:
              schema:
                type: string
              examples:
                html_example:
                  summary: Browser-friendly HTML page
                  value: |
                    Search Results - Premium Tech Electronics | Beckn Catalog
                    Search

                    # Premium Tech Electronics Store

                    High-quality electronics and gaming equipment

                    Available from Jan 27, 2025 to Dec 31, 2026

                    ## Premium Gaming Laptop Pro

                    High-performance gaming laptop with RTX graphics

                    ★★★★★ 4.8 (156 reviews)

                    $1,499.99 USD

                    Brand: Premium Tech

                    ID: laptop-item-001

                    © 2024 Beckn Catalog. Powered by Beckn Protocol.
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverResponse'
              examples:
                electronic_items:
                  $ref: '#/components/examples/browser_search_electronic_items'
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_entity_type:
                  summary: Invalid entity type error
                  description: Error when entity_type is missing or invalid
                  value:
                    error:
                      code: "INVALID_ENTITY_TYPE"
                      message: "entity_type is required and must be one of: item, provider, catalog"
        '404':
          description: No results found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no_results:
                  summary: No results found error
                  description: Error when no items match the search criteria
                  value:
                    error:
                      code: "NO_RESULTS_FOUND"
                      message: "No items found matching the specified criteria"
                      details:
                        search_criteria:
                          entity_type: "item"
                          category: "electric_vehicles"
                          price_max: 50000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    DiscoverRequest:
      type: object
      required: [context]
      properties:
        context:
          allOf:
            - $ref: '#/components/schemas/DiscoveryContext'
            - type: object
              properties:
                action:
                  type: string
                  enum: [discover]
        message:
          type: object
          description: Discover payload containing search criteria
          properties:
            text_search:
              type: string
              description: Free text search query for items
              example: "gaming laptop premium tech"
            filters:
              type: object
              description: Filter criteria for items
              properties:
                type:
                  type: string
                  enum: [jsonpath]
                  default: jsonpath
                  description: Type of filter expression
                expression:
                  type: string
                  description: Filter expression based on the specified type
                  example: "$[?(@.rating.value >= 4.0 && @.electronic.brand.name == 'Premium Tech')]"
              required: [type, expression]
            spatial:
              type: array
              description: Optional array of spatial constraints (CQL2-JSON semantics).
              items:
                $ref: '#/components/schemas/SpatialConstraint'
            
            media_search:
             $ref: '#/components/schemas/MediaSearch'

          anyOf:
            - required: [text_search]
            - required: [filters]
            
          
    DiscoverResponse:
      type: object
      required: [context, message]
      properties:
        context:
          allOf:
            - $ref: '#/components/schemas/DiscoveryContext'
            - type: object
              properties:
                action:
                  type: string
                  enum: [on_discover]
        message:
          type: object
          properties:
            catalogs:
              type: array
              description: Array of catalogs containing items
              items:
                $ref: '#/components/schemas/Catalog'

    DiscoveryContext:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/beckn/protocol-specifications/refs/heads/master/api/transaction/build/transaction.yaml#/components/schemas/Context'
        - type: object
          description: Beckn Context extended for Discovery.
          properties:
            schema_context:
              type: array
              items:
                type: string
                format: uri
              description: Optional JSON-LD context URLs indicating item types to search across

    
    GeoJSONGeometry:
      type: object
      description: >
        **GeoJSON geometry** per RFC 7946. Coordinates are in **EPSG:4326 (WGS-84)**
        and MUST follow **[longitude, latitude, (altitude?)]** order.

        Supported types:
        - Point, LineString, Polygon
        - MultiPoint, MultiLineString, MultiPolygon
        - GeometryCollection (uses `geometries` instead of `coordinates`)

        Notes:
        - For rectangles, use a Polygon with a single linear ring where the first
          and last positions are identical.
        - Circles are **not native** to GeoJSON. For circular searches, use
          `SpatialConstraint` with `op: s_dwithin` and a Point + `distanceMeters`,
          or approximate the circle as a Polygon.
        - Optional `bbox` is `[west, south, east, north]` in degrees.

      required: [type]
      properties:
        type:
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
            - GeometryCollection
        coordinates:
          type: array
          description: >
            Coordinates per RFC 7946 for all types **except** GeometryCollection.
            Order is **[lon, lat, (alt)]**. For Polygons, this is an array of
            linear rings; each ring is an array of positions.
        geometries:
          type: array
          description: >
            Member geometries when `type` is **GeometryCollection**.
          items:
            $ref: '#/components/schemas/GeoJSONGeometry'
        bbox:
          type: array
          description: Optional bounding box `[west, south, east, north]` in degrees.
          minItems: 4
          maxItems: 4
      additionalProperties: true
      examples:
        point:
          value:
            type: Point
            coordinates: [77.5946, 12.9716]
        polygon_rectangle:
          value:
            type: Polygon
            coordinates:
              - [[77.6100, 12.9200], [77.6400, 12.9200], [77.6400, 12.9500], [77.6100, 12.9500], [77.6100, 12.9200]]
        geometry_collection:
          value:
            type: GeometryCollection
            geometries:
              - { type: Point, coordinates: [77.60, 12.95] }
              - { type: LineString, coordinates: [[77.60, 12.95], [77.62, 12.97]] }

    Address:
      type: object
      description: >
        **Postal address** aligned with schema.org `PostalAddress`. Use for human-readable
        addresses. Geometry lives in `Location.geo` as GeoJSON.
      properties:
        streetAddress:
          type: string
          description: Street address (building name/number and street).
          example: "123 Tech Street"
        extendedAddress:
          type: string
          description: Address extension (apt/suite/floor, C/O).
          example: "Apt 4B"
        addressLocality:
          type: string
          description: City/locality.
          example: "Bengaluru"
        addressRegion:
          type: string
          description: State/region/province.
          example: "Karnataka"
        postalCode:
          type: string
          description: Postal/ZIP code.
          example: "560001"
        addressCountry:
          type: string
          description: Country name or ISO-3166-1 alpha-2 code.
          example: "IN"
      additionalProperties: false

    Location:
      type: object
      description: >
        A **place** represented by **GeoJSON geometry** (Point/Polygon/Multi*) and optional
        human-readable `address`. This unifies all Beckn location fields into a single,
        widely-adopted representation (GeoJSON).
      properties:
        geo:
          $ref: '#/components/schemas/GeoJSONGeometry'
        address:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Address'
          description: Optional human-readable address for the same place/area.
      required: [geo]
      additionalProperties: false
      examples:
        site_point:
          value:
            geo: { type: Point, coordinates: [77.5946, 12.9716] }
            address: "MG Road, Bengaluru"
        service_area:
          value:
            geo:
              type: Polygon
              coordinates:
                - [[77.6100, 12.9200], [77.6400, 12.9200], [77.6400, 12.9500], [77.6100, 12.9500], [77.6100, 12.9200]]

    SpatialConstraint:
      type: object
      description: >
        **Spatial predicate** using **OGC CQL2 (JSON semantics)** applied to one or
        more geometry targets in an item. This is where clients express spatial intent.

        Key ideas:
        - `targets`: one or more **JSONPath-like** pointers that locate geometry
          fields within each item document (e.g., `$['beckn:availableAt'][*]['geo']`).
        - `op`: spatial operator (CQL2). Common ones:
            • `s_within`     (A is completely inside B)
            • `s_intersects` (A intersects B)
            • `s_contains`   (A contains B)
            • `s_dwithin`    (A within distance of B)
        - `geometry`: **GeoJSON** literal used as the predicate reference geometry.
        - `distanceMeters`: required for `s_dwithin` when using a GeoJSON Point/shape.
        - `quantifier`: if a target resolves to an array, choose whether **any** (default),
          **all**, or **none** of elements must satisfy the predicate.

        CRS: unless otherwise stated, all coordinates are **EPSG:4326**.

      required: [op, targets]
      properties:
        op:
          type: string
          enum:
            - s_within
            - s_contains
            - s_intersects
            - s_disjoint
            - s_overlaps
            - s_crosses
            - s_touches
            - s_equals
            - s_dwithin
          description: OGC CQL2 spatial operator.
        targets:
          description: >
            One or more JSONPath-like pointers to geometry fields within the item.
            Example pointers:
            - `$['beckn:availableAt'][*]['geo']` (array of site Points)
            - `$['beckn:itemAttributes']['ride:dropOff']['geo']` (drop zone Polygon)
          oneOf:
            - type: string
            - type: array
              items: { type: string }
        geometry:
          $ref: '#/components/schemas/GeoJSONGeometry'
        distanceMeters:
          type: number
          minimum: 0
          description: >
            For `s_dwithin`: maximum distance in meters from the target geometry to
            `geometry` (e.g., “within 5000 m of this Point”). Ignored for other ops.
        quantifier:
          type: string
          enum: [any, all, none]
          default: any
          description: >
            How to evaluate when `targets` resolves to an array:
            - **any**: at least one element matches (default)
            - **all**: every element must match
            - **none**: no element may match
        srid:
          type: string
          description: >
            Coordinate Reference System identifier for `geometry`. Default is
            `"EPSG:4326"`. If provided, servers MAY reproject to EPSG:4326 internally.
          example: "EPSG:4326"
      additionalProperties: false
      examples:
        within_circle_as_distance:
          summary: EV sites within 5 km of a center (via s_dwithin)
          value:
            op: s_dwithin
            targets: "$['beckn:availableAt'][*]['geo']"
            geometry: { type: Point, coordinates: [77.5946, 12.9716] }
            distanceMeters: 5000
        pickup_at_point:
          summary: Pickup at a defined point (GeoJSON Point)
          description: >
            Example of a DiscoverRequest spatial constraint representing a specific pickup location.
            The requester defines a GeoJSON Point as the pickup location, and the server finds
            providers whose service area **contains** this point.
          value:
            op: s_contains
            targets: "$['beckn:itemAttributes']['ride:serviceArea']['geo']"   # provider polygon field
            geometry:
              type: Point
              coordinates: [77.5946, 12.9716]   # MG Road (Bengaluru) — [lon, lat]              
        drop_intersects_user_box:
          summary: Provider drop zone intersects user’s rectangle
          value:
            op: s_intersects
            targets: "$['beckn:itemAttributes']['ride:dropOff']['geo']"
            geometry:
              type: Polygon
              coordinates:
                - [[77.6100, 12.9200], [77.6400, 12.9200], [77.6400, 12.9500], [77.6100, 12.9500], [77.6100, 12.9200]]
        pickup_location_example:
          summary: A defined pickup location object
          value:
            geo:
              type: Point
              coordinates: [77.5946, 12.9716]   # [lon, lat]
            address:
              streetAddress: "MG Road"
              addressLocality: "Bengaluru"
              addressRegion: "Karnataka"
              postalCode: "560001"
              addressCountry: "IN"
      
    MediaSearch:
      type: object
      description: >
        Container for multimodal search inputs and configuration.
        Supports searching through **images, audio notes, and videos**
        alongside text, filters, and spatial predicates.
        For GET, this object should be JSON-encoded and URL-escaped.
      properties:
        media:
          type: array
          description: >
            One or more references to **images, audio notes, or videos** supplied
            as part of a multimodal search. Each entry references a media resource
            accessible via HTTPS or data URI.
          items:
            $ref: '#/components/schemas/MediaInput'
          example:
            - id: "snap-1"
              type: image
              url: "https://cdn.example.com/user/snaps/ccs2-cable.jpg"
              contentType: "image/jpeg"
        options:
          $ref: '#/components/schemas/MediaSearchOptions'
          description: >
            Options controlling how the discovery engine interprets the supplied media —
            e.g., whether to perform OCR/ASR, semantic similarity, or object detection.
      additionalProperties: false
      example:
        media:
          - id: "snap-1"
            type: image
            url: "https://cdn.example.com/user/snaps/ccs2-cable.jpg"
            contentType: "image/jpeg"
        options:
          goals: ["visual-object-detect", "text-from-image"]
          augment_text_search: true


    MediaInput:
      type: object
      description: Reference to an image, audio clip, or video used for multimodal search.
      required: [type, url]
      properties:
        id:
          type: string
          description: Client-supplied identifier for this media input.
        type:
          type: string
          enum: [image, audio, video]
          description: Media category.
        url:
          type: string
          format: uri
          description: HTTPS URL or data URI pointing to the media resource.
        contentType:
          type: string
          description: MIME type, e.g., image/jpeg, audio/mpeg, video/mp4.
        textHint:
          type: string
          description: Optional pre-extracted text (OCR/ASR) for search augmentation.
        language:
          type: string
          description: Language code (BCP-47) of `textHint` or spoken audio.
        startMs:
          type: integer
          description: Optional start offset in milliseconds (for audio/video segments).
        endMs:
          type: integer
          description: Optional end offset in milliseconds (for audio/video segments).
      additionalProperties: false

    MediaSearchOptions:
      type: object
      description: How the discovery engine should use the provided media inputs.
      properties:
        goals:
          type: array
          description: >
            Desired processing goals for the media.
          items:
            type: string
            enum:
              - visual-similarity        # find visually similar items
              - visual-object-detect     # detect object classes within image/video
              - text-from-image          # extract text (OCR)
              - text-from-audio          # extract text (ASR)
              - semantic-audio-match     # audio embedding similarity
              - semantic-video-match     # video scene/keyframe similarity
        augment_text_search:
          type: boolean
          default: true
          description: >
            Whether to append extracted text from OCR/ASR to `text_search`.
        restrict_results_to_media_proximity:
          type: boolean
          default: false
          description: >
            Restrict results to spatial proximity of media-derived coordinates
            (e.g., EXIF GPS tags).
      additionalProperties: false
    
    AckResponse:
      type: object
      additionalProperties: false
      properties:
        transaction_id:
          type: string
        timestamp:
          type: string
          format: date-time
        ack_status:
          type: string
          enum: [ACK, NACK]
        error:
          $ref: '#/components/schemas/Error'
      required: [transaction_id, timestamp, ack_status]
      allOf:
        - if:
            properties:
              ack_status:
                const: NACK
            required: [ack_status]
          then:
            required: [error]
        - if:
            properties:
              ack_status:
                const: ACK
            required: [ack_status]
          then:
            not:
              required: [error]

    Catalog:
      type: object
      required: ["@context", "@type", "beckn:id", "beckn:descriptor", "beckn:items"]
      additionalProperties: false
      properties:
        "@context":
          type: string
          format: uri
          description: JSON-LD context URI for the core Catalog schema
          enum: ["https://becknprotocol.io/schemas/core/v1/Catalog/schema-context.jsonld"]
        "@type":
          type: string
          description: Type of the catalog
          example: "beckn:Catalog"
        "beckn:id":
          type: string
          description: Unique identifier for the catalog
          example: "catalog-electronics-001"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:providerId":
          type: string
          description: Reference to the provider that owns this catalog
          example: "tech-store-001"
        "beckn:validity":
          $ref: '#/components/schemas/TimePeriod'
        beckn:items:  # semantic entities
          type: array
          description: >
            Array of beckn core Item entities in this catalog, returned directly without
            ItemResult wrapper for improved performance and simplified response structure
          items: { $ref: "#/components/schemas/Item" }
        beckn:offers: # commercial wrappers referencing items
          type: array
          items: { $ref: "#/components/schemas/Offer" }

    Item:
      type: object
      required: ["@context", "@type", "beckn:id", "beckn:descriptor", "beckn:provider", "beckn:itemAttributes"]
      additionalProperties: false
      properties:
        "@context":
          type: string
          format: uri
          description: JSON-LD context URI for the core Item schema
          enum: ["https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld"]
        "@type":
          type: string
          description: Type of the core item
          enum: ["beckn:Item"]
        "beckn:id":
          type: string
          description: Unique identifier for the item
          example: "gaming-laptop-001"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:category":
          $ref: '#/components/schemas/CategoryCode'
        "beckn:availableAt":
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: Physical locations where the item is available
        "beckn:availabilityWindow":
          $ref: '#/components/schemas/TimePeriod'
        "beckn:rateable":
          type: boolean
          description: Whether the item can be rated by customers
          example: true
        "beckn:rating":
          $ref: '#/components/schemas/Rating'
        "beckn:isActive":
          type: boolean
          description: Whether the item is active
          default: true
        "beckn:networkId":
          type: array
          items:
            type: string
          description: Array of network identifiers for the BAP (Beckn App Provider) that offers this item
          example: ["bap.net/electronics", "bap.net/tech"]
        "beckn:provider":
          $ref: '#/components/schemas/Provider'
        "beckn:itemAttributes":
          $ref: '#/components/schemas/Attributes'

    Offer:
      type: object
      additionalProperties: false
      required:
        - "@context"
        - "@type"
        - beckn:id
        - beckn:descriptor
        - beckn:provider
        - beckn:items
      properties:
        "@context":
          type: string
          format: uri
          example: "https://becknprotocol.io/schemas/core/v1/Offer/schema-context.jsonld"
        "@type":
          type: string
          enum: ["beckn:Offer"]
          x-jsonld: { "@id": "schema:Offer" }

        beckn:id:
          type: string
          description: Unique id for this offer
          x-jsonld: { "@id": "schema:identifier" }

        beckn:descriptor:
          $ref: "#/components/schemas/Descriptor"

        beckn:provider:
          $ref: "#/components/schemas/Provider/properties/beckn:id"
          description: Seller / provider of this offer
          x-jsonld: { "@id": "schema:seller" }

        # Single source of truth for base item(s)
        beckn:items:
          type: array
          minItems: 1
          items: { $ref: "#/components/schemas/Item/properties/beckn:id" }
          description: Base item(s) the offer applies to (single or bundle)
          x-jsonld: { "@id": "schema:itemOffered" }

        # Optional extras
        beckn:addOns:
          type: array
          items: { $ref: "#/components/schemas/Offer/properties/beckn:id" }
          description: Optional extra Offers that can be attached (e.g., warranty, gift wrap)
          x-jsonld: { "@id": "schema:addOn" }

        beckn:addOnItems:
          type: array
          items: { $ref: "#/components/schemas/Item/properties/beckn:id" }
          description: Optional extras modeled as items (e.g., toppings, accessories)
          x-jsonld: { "@id": "schema:addOn" }

        beckn:validity:
          $ref: "#/components/schemas/TimePeriod"
          description: Offer validity window
          x-jsonld: { "@id": "schema:availabilityStarts|schema:availabilityEnds" }

        beckn:price:
          $ref: "#/components/schemas/PriceSpecification"
          description: Price snapshot; detailed models can live in offerAttributes
          x-jsonld: { "@id": "schema:priceSpecification" }

        beckn:eligibility:
          $ref: "#/components/schemas/Eligibility"
          description: Optional eligibility (regions, quantities, audiences)
          x-jsonld: { "@id": "schema:eligibleRegion|schema:eligibleQuantity|schema:eligibleCustomerType" }

        beckn:offerAttributes:
          $ref: "#/components/schemas/Attributes"
          description: Attribute Pack attachment (pricing models, discounts, rail terms, etc.)          
              
    Attributes:
      type: object
      description: >
        JSON-LD aware bag for domain-specific attributes of an Item.
        MUST include @context (URI) and @type (compact or full IRI).
        Any additional properties are allowed and interpreted per the provided JSON-LD context.
      required: ["@context", "@type"]
      minProperties: 2
      additionalProperties: true
      properties:
        "@context":
          type: string
          format: uri
          description: JSON-LD context URI for the specific domain schema (e.g., ElectronicItem)
          example: "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
        "@type":
          type: string
          description: JSON-LD type within the domain schema
          example: "beckn:ElectronicItem"              

    Provider:
      type: object
      required: ["beckn:id", "beckn:descriptor"]
      additionalProperties: false
      properties:
        "beckn:id":
          type: string
          description: Unique identifier for the provider
          example: "tech-store-001"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:validity":
          $ref: '#/components/schemas/TimePeriod'
        "beckn:locations":
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: Physical locations where the provider operates
        "beckn:rateable":
          type: boolean
          description: Whether the provider can be rated by customers
          example: true
        "beckn:rating":
          $ref: '#/components/schemas/Rating'
        "beckn:providerAttributes":
          $ref: '#/components/schemas/Attributes'

    PriceSpecification:
      type: object
      additionalProperties: true
      properties:
        currency: { type: string, description: ISO 4217 code }
        value:    { type: number, description: Total value for this spec node }
        components:
          type: array
          description: Optional components (tax, shipping, discount, fee, surcharge)
          items:
            type: object
            properties:
              type: { type: string, enum: ["UNIT","TAX","DELIVERY","DISCOUNT","FEE","SURCHARGE"] }
              value: { type: number }
              currency: { type: string }
              description: { type: string }
      x-jsonld: { "@id": "schema:PriceSpecification" }
      
    Eligibility:
      type: object
      properties:
        eligibleRegion: { type: string }
        eligibleQuantity:
          type: object
          properties:
            min: { type: number }
            max: { type: number }
      x-jsonld: { "@id": "schema:DefinedRegion|schema:QuantitativeValue" }
      
    
    Descriptor:
      type: object
      required: ["@type"]
      properties:
        "@type":
          type: string
          enum: ["beckn:Descriptor"]
          description: Type of the descriptor
          example: "beckn:Descriptor"
        "schema:name":
          type: string
          description: Name of the item
          example: "Premium Gaming Laptop Pro"
        "beckn:shortDesc":
          type: string
          description: Short description of the item
          example: "High-performance gaming laptop with RTX graphics"
        "beckn:longDesc":
          type: string
          description: Detailed description of the item
          example: "Powerful gaming laptop with NVIDIA RTX graphics, fast SSD storage, and high-refresh display"
        "schema:image":
          type: array
          items: { type: string, format: uri }

    CategoryCode:
      type: object
      required: ["@type", "schema:codeValue"]
      properties:
        "@type":
          type: string
          enum: ["schema:CategoryCode"]
          description: Type of the category code
          example: "schema:CategoryCode"
        "schema:codeValue":
          type: string
          description: Category code value
          example: "electronics"
        "schema:name":
          type: string
          description: Category name
          example: "Electronics"
        "schema:description":
          type: string
          description: Category description
          example: "Electronic devices and equipment"

    TimePeriod:
      type: object
      description: Time window with date-time precision for availability/validity
      required: ["@type"]
      properties:
        "@type":
          type: string
          description: JSON-LD type for a date-time period
          example: "beckn:TimePeriod"
        "schema:startDate":
          type: string
          format: date-time
          description: Start instant (inclusive)
          example: "2025-01-27T09:00:00Z"
        "schema:endDate":
          type: string
          format: date-time
          description: End instant (exclusive or inclusive per domain semantics)
          example: "2025-12-31T23:59:59Z"
      anyOf:
        - required: ["schema:startDate"]
        - required: ["schema:endDate"]

    Rating:
      type: object
      required: ["@type"]
      properties:
        "@type":
          type: string
          enum: ["beckn:Rating"]
          description: Type of the rating
          example: "beckn:Rating"
        "beckn:ratingValue":
          type: number
          minimum: 0
          maximum: 5
          description: Rating value (0-5)
          example: 4.8
        "beckn:ratingCount":
          type: integer
          minimum: 0
          description: Number of ratings
          example: 1250

    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          $ref: '#/components/schemas/Error'

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Error code
          example: "INVALID_SCHEMA_FIELD"
        message:
          type: string
          description: Human-readable error message
          example: "Field 'electronic:invalidField' not found in ElectronicItem schema"
        details:
          type: object
          description: Additional error details
          
  examples:
    # ---------- /discover request examples ----------
    discover_structured_query:
      summary: Structured discover (electronics)
      value:
        context:
          version: "2.0.0"
          action: "discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "5c8f1a2b-9d3e-4f76-8b21-3a4c5d6e7f80"
          transaction_id: "d3b07384-4a1c-4f5e-9c2b-7e6d5c4b3a21"
          bap_id: "bap.example.com"
          bap_uri: "https://bap.example.com"
          ttl: "PT30S"
          schema_context:
            - "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
        message:
          text_search: "gaming laptop premium tech"
          filters:
            type: "jsonpath"
            expression: "$[?(@.rating.value >= 4 && @.electronic.brand.name == 'Premium Tech')]"

    discover_natural_language:
      summary: Natural-language discover (electronics)
      value:
        context:
          version: "2.0.0"
          action: "discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "9a7b6c5d-8e4f-4a3b-9c2d-1e0f2a3b4c5d"
          transaction_id: "1f2e3d4c-5b6a-4789-8c0d-1a2b3c4d5e6f"
          bap_id: "bap.example.com"
          bap_uri: "https://bap.example.com"
          ttl: "PT30S"
          schema_context:
            - "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
        message:
          text_search: "Looking for a premium gaming laptop under $2000 near San Francisco"

    discover_grocery_search:
      summary: Structured discover (grocery)
      value:
        context:
          version: "2.0.0"
          action: "discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "2a3b4c5d-6e7f-4890-9a1b-2c3d4e5f6071"
          transaction_id: "7e6d5c4b-3a21-4c5d-8f70-9a1b2c3d4e5f"
          bap_id: "bap.example.com"
          bap_uri: "https://bap.example.com"
          ttl: "PT30S"
          schema_context:
            - "https://example.org/schema/items/v1/GroceryItem/schema-context.jsonld"
        message:
          text_search: "organic apples fresh"
          filters:
            type: "jsonpath"
            expression: "$[?(@.grocery.organicCertification ~ 'USDA Organic')]"

    discover_combined_search:
      summary: Combined text + filters
      value:
        context:
          version: "2.0.0"
          action: "discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "3b4c5d6e-7f80-41a2-93b4-c5d6e7f8091a"
          transaction_id: "8f70e6d5-c4b3-42a1-9c2d-3e4f5a6b7c8d"
          bap_id: "bap.example.com"
          bap_uri: "https://bap.example.com"
          ttl: "PT30S"
          schema_context:
            - "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
        message:
          text_search: "gaming laptop"
          filters:
            type: "jsonpath"
            expression: "$[?(@.electronic.price['schema:price'] <= 2000 && @.electronic.brand.name == 'Premium Tech')]"

    discover_multi_schema_search:
      summary: Multi-schema discover (electronics + grocery)
      value:
        context:
          version: "2.0.0"
          action: "discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "4c5d6e7f-8091-42b3-94c5-d6e7f8091a2b"
          transaction_id: "9c2d3e4f-5a6b-47c8-8d90-1a2b3c4d5e6f"
          bap_id: "bap.example.com"
          bap_uri: "https://bap.example.com"
          ttl: "PT30S"
          schema_context:
            - "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
            - "https://example.org/schema/items/v1/GroceryItem/schema-context.jsonld"
        message:
          text_search: "premium tech and organic food"
          filters:
            type: "jsonpath"
            expression: "$[?(@.rating.value >= 4 && (@.electronic.brand.name == 'Premium Tech' || @.grocery.organicCertification ~ 'USDA Organic'))]"

    # ---------- /on_discover callback (DiscoverResponse) examples ----------
    on_discover_electronics_catalog:
      summary: Electronics catalog callback
      value:
        context:
          version: "2.0.0"
          action: "on_discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "a1b2c3d4-e5f6-4789-90ab-cdef12345678"
          transaction_id: "b2c3d4e5-f6a7-4890-8b9a-cdef23456789"
          bpp_id: "bpp.example.com"
          bpp_uri: "https://bpp.example.com"
          ttl: "PT30S"
        message:
          catalogs:
          - "@context": "https://becknprotocol.io/schemas/core/v1/Catalog/schema-context.jsonld"
            "@type": "beckn:Catalog"
            "beckn:id": "catalog-electronics-001"
            "beckn:descriptor": { "@type": "beckn:Descriptor", "schema:name": "Premium Tech Electronics Store" }
            "beckn:items": [
                {
                  "@context": "https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld",
                  "@type": "beckn:Item",
                  "beckn:id": "laptop-item-002",
                  "beckn:descriptor": {
                    "@type": "beckn:Descriptor",
                    "schema:name": "Premium Gaming Laptop Pro 15”",
                    "beckn:shortDesc": "Intel i7, 16GB RAM, 512GB SSD, RTX 4060"
                  },
                  "beckn:category": {
                    "@type": "schema:CategoryCode",
                    "schema:codeValue": "electronics",
                    "schema:name": "Electronics"
                  },
                  "beckn:rateable": true,
                  "beckn:rating": {
                    "@type": "beckn:Rating",
                    "beckn:ratingValue": 4.7,
                    "beckn:ratingCount": 932
                  },
                  "beckn:networkId": ["bap.net/electronics"],
                  "beckn:itemAttributes": {
                    "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld",
                    "@type": "beckn:ElectronicItem",
                    "electronic:brand": "Premium Tech",
                    "electronic:model": "G15-Pro-2025",
                    "electronic:processor": "Intel Core i7-13700H",
                    "electronic:ram": "16GB DDR5",
                    "electronic:storage": "512GB NVMe SSD",
                    "electronic:graphics": "NVIDIA GeForce RTX 4060",
                    "electronic:display": "15.6\" 240Hz QHD",
                    "electronic:warranty": "24 months"
                  },
                  "beckn:provider": {
                    "beckn:id": "tech-store-001",
                    "beckn:descriptor": {
                      "@type": "beckn:Descriptor",
                      "schema:name": "Premium Tech Electronics Store"
                    }
                  }
                },
                {
                  "@context": "https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld",
                  "@type": "beckn:Item",
                  "beckn:id": "headphones-item-001",
                  "beckn:descriptor": {
                    "@type": "beckn:Descriptor",
                    "schema:name": "Aurora X200 Noise-Cancelling Headphones",
                    "beckn:shortDesc": "Over-ear ANC, 40h battery, BT 5.3, multipoint"
                  },
                  "beckn:category": {
                    "@type": "schema:CategoryCode",
                    "schema:codeValue": "electronics",
                    "schema:name": "Electronics"
                  },
                  "beckn:rateable": true,
                  "beckn:rating": {
                    "@type": "beckn:Rating",
                    "beckn:ratingValue": 4.5,
                    "beckn:ratingCount": 1543
                  },
                  "beckn:networkId": ["bap.net/electronics"],
                  "beckn:itemAttributes": {
                    "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld",
                    "@type": "beckn:ElectronicItem",
                    "electronic:brand": "Aurora",
                    "electronic:model": "X200",
                    "electronic:wirelessTech": "Bluetooth 5.3",
                    "electronic:features": ["ANC", "Transparency Mode", "Multipoint"],
                    "electronic:batteryLifeHours": 40,
                    "electronic:chargingPort": "USB-C",
                    "electronic:warranty": "12 months"
                  },
                  "beckn:provider": {
                    "beckn:id": "tech-store-001",
                    "beckn:descriptor": {
                      "@type": "beckn:Descriptor",
                      "schema:name": "Premium Tech Electronics Store"
                    }
                  }
                }
              ]

    on_discover_grocery_catalog:
      summary: Grocery catalog callback
      value:
        context:
          version: "2.0.0"
          action: "on_discover"
          timestamp: "2024-04-10T16:10:50+05:30"
          message_id: "c3d4e5f6-a7b8-49c0-9dab-ef1234567890"
          transaction_id: "d4e5f6a7-b8c9-4ad1-8cab-1234567890ef"
          bpp_id: "bpp.example.com"
          bpp_uri: "https://bpp.example.com"
          ttl: "PT30S"
        message:
          catalogs:
          - "@context": "https://becknprotocol.io/schemas/core/v1/Catalog/schema-context.jsonld"
            "@type": "beckn:Catalog"
            "beckn:id": "catalog-grocery-001"
            "beckn:descriptor": { "@type": "beckn:Descriptor", "schema:name": "Fresh Grocery Store" }
            "beckn:items": [
              {
                "@context": "https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld",
                "@type": "beckn:Item",
                "beckn:id": "apples-item-001",
                "beckn:descriptor": {
                  "@type": "beckn:Descriptor",
                  "schema:name": "Organic Fuji Apples (1 kg)",
                  "beckn:shortDesc": "Crisp, sweet USDA Organic apples — farm fresh"
                },
                "beckn:category": {
                  "@type": "schema:CategoryCode",
                  "schema:codeValue": "grocery",
                  "schema:name": "Grocery"
                },
                "beckn:rateable": true,
                "beckn:rating": {
                  "@type": "beckn:Rating",
                  "beckn:ratingValue": 4.6,
                  "beckn:ratingCount": 387
                },
                "beckn:networkId": ["bap.net/grocery"],
                "beckn:itemAttributes": {
                  "@context": "https://example.org/schema/items/v1/GroceryItem/schema-context.jsonld",
                  "@type": "beckn:GroceryItem",
                  "grocery:brand": "Fresh Fields",
                  "grocery:organicCertification": "USDA Organic",
                  "grocery:variety": "Fuji",
                  "grocery:unitSize": "1 kg",
                  "grocery:origin": "Himachal Pradesh, IN",
                  "grocery:shelfLifeDays": 10
                },
                "beckn:provider": {
                  "beckn:id": "grocery-store-001",
                  "beckn:descriptor": {
                    "@type": "beckn:Descriptor",
                    "schema:name": "Fresh Grocery Store"
                  }
                }
              },
              {
                "@context": "https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld",
                "@type": "beckn:Item",
                "beckn:id": "bread-item-001",
                "beckn:descriptor": {
                  "@type": "beckn:Descriptor",
                  "schema:name": "Whole Wheat Bread (500 g)",
                  "beckn:shortDesc": "High-fiber artisan loaf, no added sugar"
                },
                "beckn:category": {
                  "@type": "schema:CategoryCode",
                  "schema:codeValue": "grocery",
                  "schema:name": "Grocery"
                },
                "beckn:rateable": true,
                "beckn:rating": {
                  "@type": "beckn:Rating",
                  "beckn:ratingValue": 4.3,
                  "beckn:ratingCount": 812
                },
                "beckn:networkId": ["bap.net/grocery"],
                "beckn:itemAttributes": {
                  "@context": "https://example.org/schema/items/v1/GroceryItem/schema-context.jsonld",
                  "@type": "beckn:GroceryItem",
                  "grocery:brand": "BakeHouse",
                  "grocery:unitSize": "500 g",
                  "grocery:ingredients": ["Whole wheat flour", "Yeast", "Salt", "Olive oil"],
                  "grocery:allergens": ["Gluten"],
                  "grocery:shelfLifeDays": 5
                },
                "beckn:provider": {
                  "beckn:id": "grocery-store-001",
                  "beckn:descriptor": {
                    "@type": "beckn:Descriptor",
                    "schema:name": "Fresh Grocery Store"
                  }
                }
              }
            ]

    # ---------- ACK / NACK examples ----------
    ack_success:
      summary: ACK
      value:
        transaction_id: "e5f6a7b8-c9d0-4e1f-9a2b-3c4d5e6f7081"
        timestamp: "2024-04-10T16:10:50+05:30"
        ack_status: "ACK"

    ack_bad_request:
      summary: NACK — bad request
      value:
        transaction_id: "f6a7b8c9-d0e1-42f3-8a2b-3c4d5e6f7081"
        timestamp: "2024-04-10T16:10:50+05:30"
        ack_status: "NACK"
        error:
          code: "INVALID_REQUEST"
          paths: "context.schema_context"
          message: "Invalid schema context provided"

    ack_server_error:
      summary: NACK — internal error
      value:
        transaction_id: "a7b8c9d0-e1f2-43a4-9b2c-3d4e5f607081"
        timestamp: "2024-04-10T16:10:50+05:30"
        ack_status: "NACK"
        error:
          code: "INTERNAL_ERROR"
          paths: "server"
          message: "Internal server error occurred"

    # ---------- /discover/browser-search JSON example ----------
    browser_search_electronic_items:
      summary: Browser-search JSON response (electronics)
      value:
        id: "api.beckn.discover.browser-search"
        ver: "v2"
        ts: "2024-04-10T16:10:50+05:30"
        params:
          msgid: "0a1b2c3d-4e5f-6789-8a0b-1c2d3e4f5a6b"
          traceid: "1b2c3d4e-5f60-4781-92a3-b4c5d6e7f809"
        response:
          context:
            version: "2.0.0"
            action: "on_discover"
          catalogs:
            - "@context": "https://becknprotocol.io/schemas/core/v1/Catalog/schema-context.jsonld"
              "@type": "beckn:Catalog"
              "beckn:id": "catalog-electronics-001"
              "beckn:descriptor":
                "@type": "beckn:Descriptor"
                "schema:name": "Premium Tech Electronics Store"
                "beckn:shortDesc": "High-quality electronics and gaming equipment"
              "beckn:validity":
                "@type": "beckn:TimePeriod"
                "schema:startDate": "2025-01-27T09:00:00Z"
                "schema:endDate": "2026-12-31T23:59:59Z"
              "beckn:items":
                - "@context": "https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld"
                  "@type": "beckn:Item"
                  "beckn:id": "laptop-item-001"
                  "beckn:descriptor":
                    "@type": "beckn:Descriptor"
                    "schema:name": "Premium Gaming Laptop Pro"
                    "beckn:shortDesc": "High-performance gaming laptop with RTX graphics"
                  "beckn:category":
                    "@type": "schema:CategoryCode"
                    "schema:codeValue": "electronics"
                    "schema:name": "Electronics"
                  "beckn:rating":
                    "@type": "beckn:Rating"
                    "beckn:ratingValue": 4.8
                    "beckn:ratingCount": 156
                  "beckn:rateable": true
                  "beckn:networkId": ["bap.net/electronics"]
                  "beckn:itemAttributes":
                    "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
                    "@type": "beckn:ElectronicItem"
                    "electronic:brand": "ASUS"
                    "electronic:model": "ROG Strix G15"
                    "electronic:processor": "Intel Core i7-12700H"
                    "electronic:ram": "16GB DDR4"
                    "electronic:storage": "512GB NVMe SSD"
                    "electronic:graphics": "NVIDIA RTX 3060"
                  "beckn:provider":
                    "beckn:id": "tech-store-001"
                    "beckn:descriptor":
                      "@type": "beckn:Descriptor"
                      "schema:name": "Premium Tech Store"