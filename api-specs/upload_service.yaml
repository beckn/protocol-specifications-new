openapi: 3.0.3
info:
  title: Beckn Catalog Publish API
  description: |
    Asynchronous catalog ingestion for the Discovery Service.

    Pattern:
      - Client (BPP) POSTs to **/catalog/publish** → receives **AckResponse** (ACK/NACK).
      - Discovery Service later POSTs to **/on_catalog_publish** on the BPP's callback URL with processing results → BPP ACKs.

    This file **reuses** core schemas from the Discovery API (Catalog, Item, Provider, DomainAttributes, TimePeriod, AckResponse, DiscoveryContext).
    Replace **DISCOVERY_SPEC_URL** below with the absolute URL of your Discovery API YAML.
  version: 1.0.0
  contact:
    name: Beckn Protocol
    url: https://becknprotocol.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://staging-api.becknprotocol.io
    description: Staging
  - url: http://localhost:8081
    description: Local publish service

# NOTE: Set this to the raw URL of your Discovery API YAML (the one we’ve been editing).
# Example (replace with your actual path/branch):
#   DISCOVERY_SPEC_URL: https://raw.githubusercontent.com/sanketika-labs/beckn-schema/refs/heads/main/becknv2-schema/api-specs/discover-api-openapi-attr.yaml
x-spec-refs:
  DISCOVERY_SPEC_URL: https://raw.githubusercontent.com/abhimail/beckn/refs/heads/main/protocol-enhancements/discover.yaml

paths:
  /beckn/v2/catalog/publish:
    post:
      summary: Publish one or more catalogs for indexing
      description: |
        BPP submits catalogs to be indexed. Returns **ACK** immediately if accepted for processing.
        The detailed per-catalog processing result arrives later via **/on_catalog_publish**.
      operationId: publishCatalogs
      tags: [Catalog Publish]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogPublishRequest'
            examples:
              publish_basic:
                summary: Minimal publish
                value:
                  context:
                    version: "2.0.0"
                    action: "catalog_publish"
                    timestamp: "2025-09-01T10:30:00+05:30"
                    message_id: "u-req-123"
                    transaction_id: "u-txn-123"
                    bap_id: "bpp.example.com"
                    bap_uri: "https://bpp.example.com/callbacks"  # where /on_catalog_publish is exposed
                    ttl: "PT30S"
                  catalogs:
                    - "@context": "https://becknprotocol.io/schemas/core/v1/Catalog/schema-context.jsonld"
                      "@type": "beckn:Catalog"
                      "beckn:id": "catalog-001"
                      "beckn:descriptor": { "@type": "beckn:Descriptor", "schema:name": "BPP Test Catalog" }
                      "beckn:items": []
      responses:
        '200':
          description: ACK of receiving the catalog publish request
          content:
            application/json:
              schema:
                $ref: '../schema/core/v2/core.yaml#/components/schemas/AckResponse'
        '400':
          description: Bad request (validation failed before enqueue)
          content:
            application/json:
              schema:
                $ref: '../schema/core/v2/core.yaml#/components/schemas/AckResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '../schema/core/v2/core.yaml#/components/schemas/AckResponse'

  /beckn/v2/catalog/on_publish:
    post:
      summary: Callback with catalog publish processing results
      description: |
        Discovery Service calls back with per-catalog processing results (accepted/rejected, errors, derived stats).
        The receiver should respond with an **AckResponse**.
      operationId: onCatalogPublish
      tags: [Catalog Publish]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogPublishResponse'
            examples:
              results_basic:
                summary: Example processing results
                value:
                  context:
                    version: "2.0.0"
                    action: "on_catalog_publish"
                    timestamp: "2025-09-01T10:31:05+05:30"
                    message_id: "u-resp-123"
                    transaction_id: "u-txn-123"
                    bpp_id: "discovery-indexer.example.com"
                    bpp_uri: "https://discovery-indexer.example.com"
                    ttl: "PT30S"
                  results:
                    - catalog_id: "catalog-001"
                      status: "ACCEPTED"
                      item_count: 42
                      warnings:
                        - code: "NON_NORMALIZED_BRAND"
                          message: "Some brand values were normalized"
                    - catalog_id: "catalog-002"
                      status: "REJECTED"
                      error:
                        code: "INVALID_ITEM"
                        message: "Invalid item payload at index 3"
                        paths: "catalogs[1].items[3]"
      responses:
        '200':
          description: ACK of receiving the on_catalog_publish callback
          content:
            application/json:
              schema:
                $ref: '../schema/core/v2/core.yaml#/components/schemas/AckResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '../schema/core/v2/core.yaml#/components/schemas/AckResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '../schema/core/v2/core.yaml#/components/schemas/AckResponse'

components:
  schemas:

    # ---------- Envelopes ----------
    CatalogPublishRequest:
      type: object
      required: [context, catalogs]
      properties:
        context:
          allOf:
            - $ref: './discover.yaml#/components/schemas/DiscoveryContext'
            - type: object
              properties:
                action:
                  type: string
                  enum: [catalog_publish]
        catalogs:
          type: array
          items:
            $ref: '../schema/core/v2/core.yaml#/components/schemas/Catalog'
          minItems: 1
      description: |
        Catalog Publish request envelope.
        *context.version* MUST indicate the supported protocol version (e.g., "2.0.0").

    CatalogPublishResponse:
      type: object
      required: [context, results]
      properties:
        context:
          allOf:
            - $ref: './discover.yaml#/components/schemas/DiscoveryContext'
            - type: object
              properties:
                action:
                  type: string
                  enum: [on_catalog_publish]
        results:
          type: array
          description: Per-catalog processing results
          items:
            $ref: '#/components/schemas/CatalogProcessingResult'

    # ---------- Result model ----------
    CatalogProcessingResult:
      type: object
      required: [catalog_id, status]
      properties:
        catalog_id:
          type: string
          description: The "beckn:id" of the submitted catalog
        status:
          type: string
          enum: [ACCEPTED, REJECTED, PARTIAL]
          description: Final processing outcome for this catalog
        item_count:
          type: integer
          minimum: 0
          description: Number of items indexed (when accepted/partial)
        warnings:
          type: array
          description: Non-fatal issues encountered
          items:
            $ref: '#/components/schemas/ProcessingNotice'
        error:
          $ref: '../schema/core/v2/core.yaml#/components/schemas/Error'

    ProcessingNotice:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true

  # (No local examples here; feel free to add and/or externalize like we did in the Discovery API.)