openapi: 3.1.1
info:
  title: Beckn Core Schemas v2
  description: |
    Core schemas for the Beckn Protocol v2. This file contains the fundamental
    data structures used across discovery, transaction, and other Beckn services.
  version: 2.0.0
  contact:
    name: Beckn Protocol
    url: https://becknprotocol.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

components:
  schemas:
    Catalog:
      type: object
      required: ["@context", "@type", "beckn:id", "beckn:descriptor", "beckn:items"]
      additionalProperties: false
      properties:
        "@context":
          type: string
          format: uri
          description: JSON-LD context URI for the core Catalog schema
          enum: ["https://becknprotocol.io/schemas/core/v1/Catalog/schema-context.jsonld"]
        "@type":
          type: string
          description: Type of the catalog
          example: "beckn:Catalog"
        "beckn:id":
          type: string
          description: Unique identifier for the catalog
          example: "catalog-electronics-001"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:providerId":
          type: string
          description: Reference to the provider that owns this catalog
          example: "tech-store-001"
        "beckn:validity":
          $ref: '#/components/schemas/TimePeriod'
        beckn:items:  # semantic entities
          type: array
          description: >
            Array of beckn core Item entities in this catalog, returned directly without
            ItemResult wrapper for improved performance and simplified response structure
          items: { $ref: "#/components/schemas/Item" }
        beckn:offers: # commercial wrappers referencing items
          type: array
          items: { $ref: "#/components/schemas/Offer" }

    Item:
      type: object
      required: ["@context", "@type", "beckn:id", "beckn:descriptor", "beckn:provider", "beckn:itemAttributes"]
      additionalProperties: false
      properties:
        "@context":
          type: string
          format: uri
          description: JSON-LD context URI for the core Item schema
          enum: ["https://becknprotocol.io/schemas/core/v1/Item/schema-context.jsonld"]
        "@type":
          type: string
          description: Type of the core item
          enum: ["beckn:Item"]
        "beckn:id":
          type: string
          description: Unique identifier for the item
          example: "gaming-laptop-001"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:category":
          $ref: '#/components/schemas/CategoryCode'
        "beckn:availableAt":
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: Physical locations where the item is available
        "beckn:availabilityWindow":
          $ref: '#/components/schemas/TimePeriod'
        "beckn:rateable":
          type: boolean
          description: Whether the item can be rated by customers
          example: true
        "beckn:rating":
          $ref: '#/components/schemas/Rating'
        "beckn:isActive":
          type: boolean
          description: Whether the item is active
          default: true
        "beckn:networkId":
          type: array
          items:
            type: string
          description: Array of network identifiers for the BAP (Beckn App Provider) that offers this item
          example: ["bap.net/electronics", "bap.net/tech"]
        "beckn:provider":
          $ref: '#/components/schemas/Provider'
        "beckn:itemAttributes":
          $ref: '#/components/schemas/Attributes'

    Offer:
      type: object
      additionalProperties: false
      required:
        - "@context"
        - "@type"
        - beckn:id
        - beckn:descriptor
        - beckn:provider
        - beckn:items
      properties:
        "@context":
          type: string
          format: uri
          example: "https://becknprotocol.io/schemas/core/v1/Offer/schema-context.jsonld"
        "@type":
          type: string
          enum: ["beckn:Offer"]
          x-jsonld: { "@id": "schema:Offer" }

        beckn:id:
          type: string
          description: Unique id for this offer
          x-jsonld: { "@id": "schema:identifier" }

        beckn:descriptor:
          $ref: "#/components/schemas/Descriptor"

        beckn:provider:
          $ref: "#/components/schemas/Provider/properties/beckn:id"
          description: Seller / provider of this offer
          x-jsonld: { "@id": "schema:seller" }

        # Single source of truth for base item(s)
        beckn:items:
          type: array
          minItems: 1
          items: { $ref: "#/components/schemas/Item/properties/beckn:id" }
          description: Base item(s) the offer applies to (single or bundle)
          x-jsonld: { "@id": "schema:itemOffered" }

        # Optional extras
        beckn:addOns:
          type: array
          items: { $ref: "#/components/schemas/Offer/properties/beckn:id" }
          description: Optional extra Offers that can be attached (e.g., warranty, gift wrap)
          x-jsonld: { "@id": "schema:addOn" }

        beckn:addOnItems:
          type: array
          items: { $ref: "#/components/schemas/Item/properties/beckn:id" }
          description: Optional extras modeled as items (e.g., toppings, accessories)
          x-jsonld: { "@id": "schema:addOn" }

        beckn:validity:
          $ref: "#/components/schemas/TimePeriod"
          description: Offer validity window
          x-jsonld: { "@id": "schema:availabilityStarts|schema:availabilityEnds" }

        beckn:price:
          $ref: "#/components/schemas/PriceSpecification"
          description: Price snapshot; detailed models can live in offerAttributes
          x-jsonld: { "@id": "schema:priceSpecification" }

        beckn:eligibility:
          $ref: "#/components/schemas/Eligibility"
          description: Optional eligibility (regions, quantities, audiences)
          x-jsonld: { "@id": "schema:eligibleRegion|schema:eligibleQuantity|schema:eligibleCustomerType" }

        beckn:offerAttributes:
          $ref: "#/components/schemas/Attributes"
          description: Attribute Pack attachment (pricing models, discounts, rail terms, etc.)          
              
    Attributes:
      type: object
      description: >
        JSON-LD aware bag for domain-specific attributes of an Item.
        MUST include @context (URI) and @type (compact or full IRI).
        Any additional properties are allowed and interpreted per the provided JSON-LD context.
      required: ["@context", "@type"]
      minProperties: 2
      additionalProperties: true
      properties:
        "@context":
          type: string
          format: uri
          description: JSON-LD context URI for the specific domain schema (e.g., ElectronicItem)
          example: "https://example.org/schema/items/v1/ElectronicItem/schema-context.jsonld"
        "@type":
          type: string
          description: JSON-LD type within the domain schema
          example: "beckn:ElectronicItem"              

    Provider:
      type: object
      required: ["beckn:id", "beckn:descriptor"]
      additionalProperties: false
      properties:
        "beckn:id":
          type: string
          description: Unique identifier for the provider
          example: "tech-store-001"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:validity":
          $ref: '#/components/schemas/TimePeriod'
        "beckn:locations":
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: Physical locations where the provider operates
        "beckn:rateable":
          type: boolean
          description: Whether the provider can be rated by customers
          example: true
        "beckn:rating":
          $ref: '#/components/schemas/Rating'
        "beckn:providerAttributes":
          $ref: '#/components/schemas/Attributes'

    PriceSpecification:
      type: object
      additionalProperties: true
      properties:
        currency: { type: string, description: ISO 4217 code }
        value:    { type: number, description: Total value for this spec node }
        components:
          type: array
          description: Optional components (tax, shipping, discount, fee, surcharge)
          items:
            type: object
            properties:
              type: { type: string, enum: ["UNIT","TAX","DELIVERY","DISCOUNT","FEE","SURCHARGE"] }
              value: { type: number }
              currency: { type: string }
              description: { type: string }
      x-jsonld: { "@id": "schema:PriceSpecification" }
      
    Eligibility:
      type: object
      properties:
        eligibleRegion: { type: string }
        eligibleQuantity:
          type: object
          properties:
            min: { type: number }
            max: { type: number }
      x-jsonld: { "@id": "schema:DefinedRegion|schema:QuantitativeValue" }
      
    Descriptor:
      type: object
      required: ["@type"]
      properties:
        "@type":
          type: string
          enum: ["beckn:Descriptor"]
          description: Type of the descriptor
          example: "beckn:Descriptor"
        "schema:name":
          type: string
          description: Name of the item
          example: "Premium Gaming Laptop Pro"
        "beckn:shortDesc":
          type: string
          description: Short description of the item
          example: "High-performance gaming laptop with RTX graphics"
        "beckn:longDesc":
          type: string
          description: Detailed description of the item
          example: "Powerful gaming laptop with NVIDIA RTX graphics, fast SSD storage, and high-refresh display"
        "schema:image":
          type: array
          items: { type: string, format: uri }

    CategoryCode:
      type: object
      required: ["@type", "schema:codeValue"]
      properties:
        "@type":
          type: string
          enum: ["schema:CategoryCode"]
          description: Type of the category code
          example: "schema:CategoryCode"
        "schema:codeValue":
          type: string
          description: Category code value
          example: "electronics"
        "schema:name":
          type: string
          description: Category name
          example: "Electronics"
        "schema:description":
          type: string
          description: Category description
          example: "Electronic devices and equipment"

    TimePeriod:
      type: object
      description: Time window with date-time precision for availability/validity
      required: ["@type"]
      properties:
        "@type":
          type: string
          description: JSON-LD type for a date-time period
          example: "beckn:TimePeriod"
        "schema:startDate":
          type: string
          format: date-time
          description: Start instant (inclusive)
          example: "2025-01-27T09:00:00Z"
        "schema:endDate":
          type: string
          format: date-time
          description: End instant (exclusive or inclusive per domain semantics)
          example: "2025-12-31T23:59:59Z"
      anyOf:
        - required: ["schema:startDate"]
        - required: ["schema:endDate"]

    Rating:
      type: object
      required: ["@type"]
      properties:
        "@type":
          type: string
          enum: ["beckn:Rating"]
          description: Type of the rating
          example: "beckn:Rating"
        "beckn:ratingValue":
          type: number
          minimum: 0
          maximum: 5
          description: Rating value (0-5)
          example: 4.8
        "beckn:ratingCount":
          type: integer
          minimum: 0
          description: Number of ratings
          example: 1250

    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          $ref: '#/components/schemas/Error'

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Error code
          example: "INVALID_SCHEMA_FIELD"
        message:
          type: string
          description: Human-readable error message
          example: "Field 'electronic:invalidField' not found in ElectronicItem schema"
        details:
          type: object
          description: Additional error details

    AckResponse:
      type: object
      additionalProperties: false
      properties:
        transaction_id:
          type: string
        timestamp:
          type: string
          format: date-time
        ack_status:
          type: string
          enum: [ACK, NACK]
        error:
          $ref: '#/components/schemas/Error'
      required: [transaction_id, timestamp, ack_status]
      allOf:
        - if:
            properties:
              ack_status:
                const: NACK
            required: [ack_status]
          then:
            required: [error]
        - if:
            properties:
              ack_status:
                const: ACK
            required: [ack_status]
          then:
            not:
              required: [error]

    # Location schema from discover.yaml
    Location:
      type: object
      description: >
        A **place** represented by **GeoJSON geometry** (Point/Polygon/Multi*) and optional
        human-readable `address`. This unifies all Beckn location fields into a single,
        widely-adopted representation (GeoJSON).
      properties:
        geo:
          $ref: '#/components/schemas/GeoJSONGeometry'
        address:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Address'
          description: Optional human-readable address for the same place/area.
      required: [geo]
      additionalProperties: false
      examples:
        site_point:
          value:
            geo: { type: Point, coordinates: [77.5946, 12.9716] }
            address: "MG Road, Bengaluru"
        service_area:
          value:
            geo:
              type: Polygon
              coordinates:
                - [[77.6100, 12.9200], [77.6400, 12.9200], [77.6400, 12.9500], [77.6100, 12.9500], [77.6100, 12.9200]]

    # Address schema from discover.yaml
    Address:
      type: object
      description: >
        **Postal address** aligned with schema.org `PostalAddress`. Use for human-readable
        addresses. Geometry lives in `Location.geo` as GeoJSON.
      properties:
        streetAddress:
          type: string
          description: Street address (building name/number and street).
          example: "123 Tech Street"
        extendedAddress:
          type: string
          description: Address extension (apt/suite/floor, C/O).
          example: "Apt 4B"
        addressLocality:
          type: string
          description: City/locality.
          example: "Bengaluru"
        addressRegion:
          type: string
          description: State/region/province.
          example: "Karnataka"
        postalCode:
          type: string
          description: Postal/ZIP code.
          example: "560001"
        addressCountry:
          type: string
          description: Country name or ISO-3166-1 alpha-2 code.
          example: "IN"
      additionalProperties: false

    # GeoJSONGeometry schema from discover.yaml
    GeoJSONGeometry:
      type: object
      description: >
        **GeoJSON geometry** per RFC 7946. Coordinates are in **EPSG:4326 (WGS-84)**
        and MUST follow **[longitude, latitude, (altitude?)]** order.

        Supported types:
        - Point, LineString, Polygon
        - MultiPoint, MultiLineString, MultiPolygon
        - GeometryCollection (uses `geometries` instead of `coordinates`)

        Notes:
        - For rectangles, use a Polygon with a single linear ring where the first
          and last positions are identical.
        - Circles are **not native** to GeoJSON. For circular searches, use
          `SpatialConstraint` with `op: s_dwithin` and a Point + `distanceMeters`,
          or approximate the circle as a Polygon.
        - Optional `bbox` is `[west, south, east, north]` in degrees.

      required: [type]
      properties:
        type:
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
            - GeometryCollection
        coordinates:
          type: array
          description: >
            Coordinates per RFC 7946 for all types **except** GeometryCollection.
            Order is **[lon, lat, (alt)]**. For Polygons, this is an array of
            linear rings; each ring is an array of positions.
        geometries:
          type: array
          description: >
            Member geometries when `type` is **GeometryCollection**.
          items:
            $ref: '#/components/schemas/GeoJSONGeometry'
        bbox:
          type: array
          description: Optional bounding box `[west, south, east, north]` in degrees.
          minItems: 4
          maxItems: 4
      additionalProperties: true
      examples:
        point:
          value:
            type: Point
            coordinates: [77.5946, 12.9716]
        polygon_rectangle:
          value:
            type: Polygon
            coordinates:
              - [[77.6100, 12.9200], [77.6400, 12.9200], [77.6400, 12.9500], [77.6100, 12.9500], [77.6100, 12.9200]]
        geometry_collection:
          value:
            type: GeometryCollection
            geometries:
              - { type: Point, coordinates: [77.60, 12.95] }
              - { type: LineString, coordinates: [[77.60, 12.95], [77.62, 12.97]] }
